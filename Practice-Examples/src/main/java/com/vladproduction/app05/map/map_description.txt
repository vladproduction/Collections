Collections.Map:
1)all happens in keys
2) keys should be unique
3) you can get all keys by calling  map.keys();

4)
 HashMap() - HashSet for keys
 LinkedHashMap() - LinkedHashSet for keys
 TreeMap() - TreeSet for keys


Examples:
1) pair (key, value)
[(pair, value), (pair, value),...(pair, value)]
[("Shevchenko", 7), ("Lewandowski", 7),...("Messi", 10)]

2) Key set:
Set set = map.keySet();
["Shevchenko", "Lewandowski",...("Messi")]

3) to add pair need to call
 put(key, value) - returns Object (old value by this key)

 a) Object oldValueByThisKey = map.put("Rebrov", 11);
 if REBROV WAS NOT PRESENT BEFORE --> oldValueByThisKey = null;
 [("Shevchenko", 7), ("Lewandowski", 7),...("Messi", 10), ("Rebrov", 11)]

 b)
 Object oldValueByThisKey = map.put("Shevchenko", 10);
 oldValueByThisKey-->10;
 [("Shevchenko", 10), ("Lewandowski", 7),...("Messi", 10), ("Rebrov", 11)]
-----------------------------------



Collections.Map:
add() and set() are in one method put(key, value);
put(key,value):
1) if key not exists in map --> put() is same as add();
2) if exists in map --> put() is same as set();

---------------------------------------------------

Map - interface
Here are next implementations:
    1) HashMap
    2) LinkedHashMap
    3) TreeMap

Map map = new HashMap();
Map map = new LinkedHashMap();
Map map = new TreeMap();

    1) map - (key,value) pairs
    2) all logic applies by keys
    3) keys is Set
    4) Depending on type of Map - we have corresponding Set
    HashMap - keys HashSet
    LinkedHashMap - keys LinkedHashSet
    TreeMap - keys TreeSet






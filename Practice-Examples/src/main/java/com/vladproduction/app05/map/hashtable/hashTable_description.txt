Features of Hashtable

It is similar to HashMap, but is synchronized.
Hashtable stores key/value pair in hash table.
In Hashtable we specify an object that is used as a key, and the value we want to
associate to that key. The key is then hashed, and the resulting hash code is used
as the index at which the value is stored within the table.
The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.
HashMap does’t provide any Enumeration, while Hashtable provides not fail-fast Enumeration

Declaration:
public class Hashtable<K,V> extends Dictionary<K,V> implements Map<K,V>, Cloneable,

Serializable
Type Parameters:

K – the type of keys maintained by this map
V – the type of mapped values

Hashtable implements Serializable, Cloneable, Map<K,V> interfaces and extends Dictionary<K,V>.
The direct subclasses are Properties, UIDefaults.



    Internal Working of Hashtable
Hashtable datastructures is an array of buckets which stores the key/value pairs in them.
It makes use of hashCode() method to determine which bucket the key/value pair should map.
The hash function helps to determine the location for a given key in the bucket list.
Generally, hashcode is a non-negative integer that is equal for equal Objects and may or
may not be equal for unequal Objects. To determine whether two objects are equal or not,
hashtable makes use of the equals() method.

It is possible that two unequal Objects have the same hashcode. This is called a collision.
To resolve collisions, hashtable uses an array of lists. The pairs mapped to a single bucket
(array index) are stored in a list and list reference is stored in the array index.



Advantages of Hashtable:
    1)Thread-safe: The Hashtable class is thread-safe, meaning that multiple threads can access it
simultaneously without causing data corruption or other synchronization issues.
    2)Simple to use: The Hashtable class is simple to use and provides basic key-value data structure
functionality, which can be useful for simple cases.

Disadvantages of Hashtable:
    1)Obsolete: The Hashtable class is considered obsolete and its use is generally discouraged.
    This is because it was designed prior to the introduction of the Collections framework and does not
implement the Map interface, which makes it difficult to use in conjunction with other parts of
the framework.
    2)Limited functionality: The Hashtable class provides basic key-value data structure functionality,
but does not provide the full range of functionality that is available in the Map interface and
its implementations.
    3)Poor performance: The Hashtable class is synchronized, which can result in slower performance
compared to other implementations of the Map interface, such as HashMap or ConcurrentHashMap.
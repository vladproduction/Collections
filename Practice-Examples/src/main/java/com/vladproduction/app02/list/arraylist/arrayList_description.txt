Commonly used structures Data Structures:
-Static --> Array;
-Dynamic --> Arraylist; HashMap;

Array:
•Collections of elements in heap
•Same data type
•Fixed size
•Primitives and objects
•Varargs

Methods Array:
•Array utilities
•toString ()
•sort()
•binarySearch()



1)Java ArrayList class uses a dynamic array for storing the elements. It is like an array,
but there is no size limit. We can add or remove elements anytime. So, it is much more flexible
than the traditional array.

2)The ArrayList in Java can have the duplicate elements also. It implements the Collections.List interface so we
can use all the methods of the Collections.List interface here. The ArrayList maintains the insertion order internally.

3)The important points about the Java ArrayList class are:
    -Java ArrayList class can contain duplicate elements.
    -Java ArrayList class maintains insertion order.
    -Java ArrayList class is non synchronized.
    -Java ArrayList allows random access because the array works on an index basis.
    -In ArrayList, manipulation is a little bit slower than the LinkedList in Java because a lot of
     shifting needs to occur if any element is removed from the array list.
    -We can not create an array list of the primitive types, such as int, float, char, etc.
     It is required to use the required wrapper class in such cases. For example:
     ArrayList<Integer> al = new ArrayList<Integer>(); // works fine
    -Java ArrayList gets initialized by the size. The size is dynamic in the array list,
     which varies according to the elements getting added or removed from the list.

4)Java new generic collection allows you to have only one type of object in a collection.
Now it is type-safe, so typecasting is not required at runtime.
ArrayList<String> list=new ArrayList<String>();//creating new generic arraylist
In a generic collection, we specify the type in angular braces. Now ArrayList is forced to have the only
specified type of object in it. If you try to add another type of object, it gives a compile-time error.
----------------------------------------------
Vector
Vector vector = new Vector() - legacy ArrayList
List list = new Vector();


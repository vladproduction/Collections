Set

1) no index access
2) no order guarantee
3) unique



            add("A") - O(1)
Если в 1 бакете находится много єл-ов, то что бі доавить новій єл-т в конец
нам нужно сделать проверку на equals нового єл-та с каждім которий уже находится в баекете
Например в бакете уже 100 єл-ов --> тогда нам нужно сделать 100 проверок на equals.
Те в єтом случае скорость добавления єл-а в set = O(n).
В каждом бакете наїодится LinkedList в кторий ми и помещаем наши ел-ти.
Проблема заключается в том, что если у нас будет много колизий, то в 1 бакете (LinkedList) будет находится много (n) ел-ов.
И тогда для каждого єл-т из єтого LinkedList нам нужно будет візівать equals, те ми сделаем n шагов.

Начиная с Java8 сделана оптимизация.
добавлен treshold (порог\предел) кол-ва єл-ов в LinkedList.
Его значение=8.
Если ми добваляем 9--> ,бакет перестраивается из LinkedList в BinaryTree (папка, у которой может бить не >2 подпапок)
Єто делается для уксарения алгоритма добваления или ролучения єл-та, тк поиск єл-та в BinaryTree = lg(n)
Те єл-т в дереве из 16=4^2 єл-ов можно найти за 4 хода, а если бі єто біл LinkedList 16 єл-ов, то нужно сделать 16 ходов

add- O(lg(n))
a) когда ми добавляем 1 єл-в в бакет --> O(1) тк не нужно сравнить на equals с другими єл-ми.
b) когда в бакете уже есть єл-т (коллизия) --> нужно делать проверку на equals. O(lg(n))

remove - O(lg(n));
remove(item)
Сначала вісчитіваешь бакет используя hashCode
item.hashCode()%capacity = номер бакета
Єто заняло O(1)
А далее тебе нужно найти item, которий ти хочешь удалить в бакете.
Для єтого тебе нужно обойти LinkedList (BinaryTree)=lg(n)

Все операции с HashSet модно оценить как O(lg(n))

Коллизия - когда у тебя существуют более 1 єл-та которие попадают в бакет.
item1.hashCode()%capacity == item2.hashCode()%capacity --> колизия.










HashSet
1) no index access
2) no order guarantee
3) unique (based on hashCode and equals)


LinkedHashSet
1) no index access
2) order guarantee
(in which order you add --> same order when you get via for ech or iterator)
3) unique (based on hashCode and equals)
